[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Yousef\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Yousef\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 121.2389ms
[debug]       Load.loadUnit: defsScala took 0.5836ms
[debug] [Loading] Scanning directory C:\Users\Yousef\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Yousef\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.2807 ms
[debug]           Load.resolveProject(global-plugins) took 84.5048ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Yousef\.sbt\1.0\plugins, plugins: List(<none>))) took 150.7283ms
[debug] [Loading] Done in C:\Users\Yousef\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 186.5471ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2824ms
[debug]     Load.loadUnit(file:/C:/Users/Yousef/.sbt/1.0/plugins/, ...) took 320.6763ms
[debug]   Load.apply: load took 573.9087ms
[debug]   Load.apply: resolveProjects took 6.3599ms
[debug]   Load.apply: finalTransforms took 77.73ms
[debug]   Load.apply: config.delegates took 10.6264ms
[debug]   Load.apply: Def.make(settings)... took 493.3048ms
[debug]   Load.apply: structureIndex took 136.9748ms
[debug]   Load.apply: mkStreams took 4.5716ms
[info] loading global plugins from C:\Users\Yousef\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3480.575ms
[debug]           Load.loadUnit: plugins took 27.5135ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory D:\work\ParadigmsProject\project
[debug]             Load.loadUnit: mkEval took 5.7197ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\work\ParadigmsProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.8457 ms
[info] loading settings for project paradigmsproject-build from idea.sbt ...
[debug]               Load.resolveProject(paradigmsproject-build) took 4.3233ms
[debug]             Load.loadTransitive: finalizeProject(Project(id paradigmsproject-build, base: D:\work\ParadigmsProject\project, plugins: List(<none>))) took 7.9578ms
[debug] [Loading] Done in D:\work\ParadigmsProject\project, returning: (paradigmsproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 179.6962ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.6578ms
[debug]         Load.loadUnit(file:/D:/work/ParadigmsProject/project/, ...) took 214.9686ms
[debug]       Load.apply: load took 216.9457ms
[debug]       Load.apply: resolveProjects took 0.151ms
[debug]       Load.apply: finalTransforms took 16.7133ms
[debug]       Load.apply: config.delegates took 0.5501ms
[debug]       Load.apply: Def.make(settings)... took 170.2389ms
[debug]       Load.apply: structureIndex took 56.2426ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from D:\work\ParadigmsProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4573.5757ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory D:\work\ParadigmsProject
[debug]       Load.loadUnit: mkEval took 0.3437ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\work\ParadigmsProject, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5762 ms
[info] loading settings for project paradigmsproject from build.sbt ...
[debug]         Load.resolveProject(paradigmsproject) took 41.7354ms
[debug]       Load.loadTransitive: finalizeProject(Project(id paradigmsproject, base: D:\work\ParadigmsProject, plugins: List(<none>))) took 45.8239ms
[debug] [Loading] Done in D:\work\ParadigmsProject, returning: (paradigmsproject)
[debug]     Load.loadUnit: loadedProjectsRaw took 4837.9507ms
[debug]     Load.loadUnit: cleanEvalClasses took 23.5195ms
[debug]   Load.loadUnit(file:/D:/work/ParadigmsProject/, ...) took 9436.0238ms
[debug] Load.apply: load took 9438.318ms
[debug] Load.apply: resolveProjects took 0.1364ms
[debug] Load.apply: finalTransforms took 27.8155ms
[debug] Load.apply: config.delegates took 0.3226ms
[debug] Load.apply: Def.make(settings)... took 73.2296ms
[debug] Load.apply: structureIndex took 26.0606ms
[debug] Load.apply: mkStreams took 0.0061ms
[info] set current project to ParadigmsProject (in build file:/D:/work/ParadigmsProject/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * paradigmsproject / mainClass
[warn]   +- D:\work\ParadigmsProject\build.sbt:13
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56334 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56334, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ParadigmsProject (in build file:/D:/work/ParadigmsProject/)
[debug] > Exec(idea-shell, None, None)
